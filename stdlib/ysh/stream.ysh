# stream.ysh
#
# Usage:
#   source --builtin stream.ysh
#
# For reading lines, decoding, extracting, splitting

# make this file a test server
source $LIB_OSH/byo-server.sh

source $LIB_YSH/args.ysh

proc slurp-by (; num_lines) {
  var buf = []
  for line in (io.stdin) {
    call buf->append(line)
    if (len(buf) === num_lines) {
      json write (buf, space=0)

      # TODO:
      #call buf->clear()
      setvar buf = []
    }
  }
  if (buf) {
    json write (buf, space=0)
  }
}

proc test-slurp-by {
  seq 8 | slurp-by (3)
}

# Note:
# - these are all the same algorithm
# - also word, block, etc. are all optional

proc each-line (...words; template=null; ; block=null) {
  # TODO: 
  # parse --j8 --max-jobs flag

  # parse template_str as string
  # TODO: this is dangerous though ... because you can execute code
  # I think you need a SAFE version

  # evaluate template string expression - I guess that allows $(echo hi) and so
  # forth

  # evaluate block with _line binding
  # block: execute in parallel with --max-jobs

  for line in (stdin) {
    echo TODO
  }
}

proc test-each-line {
  echo 'TODO: need basic test runner'

  # ysh-tool test stream.ysh
  # 
  # Col
}

proc each-row (; ; block) {
  echo TODO
}

proc split-by (; delim; ifs=null; block) {

  # TODO: provide the option to bind names?  Or is that a separate thing?
  # The output of this is "ragged"

  for line in (io.stdin) {
    #pp (line)
    var parts = line.split(delim)
    pp (parts)

    # variable number
    call io->eval(block, dollar0=line, pos_args=parts)
  }
}

proc chop () {
  ### alias for split-by
  echo TODO
}

proc test-split-by {
  var z = 'z'  # test out scoping
  var count = 0  # test out mutation

  # TODO: need split by space
  # Where the leading and trailing are split
  # if-split-by(' ') doesn't work well

  line-data | split-by (/s+/) {

    # how do we deal with nonexistent?
    # should we also bind _parts or _words?

    echo "$z | $0 | $1 | $z"

    setvar count += 1
  }
  echo "count = $count"
}

proc must-split-by (; ; ifs=null; block) {
  ### like if-split-by

  echo TODO
}

proc if-match (; pattern; ; block) {
  ### like 'grep' but with submatches

  for line in (io.stdin) {
    var m = line.search(pattern)
    if (m) {
      #pp asdl_ (m)
      #var groups = m.groups()

      # Should we also pass _line?
      call io->eval(block, dollar0=m.group(0))
    }
  }

  # always succeeds - I think must-match is the one that can fail
}

proc must-match (; pattern; block) {
  ### like if-match

  echo TODO
}

proc line-data {
  # note: trailing ''' issue, I should probably get rid of the last line

  echo '''
  prefix 30 foo  
  oils
  /// 42 bar'''
}

proc test-if-match {
  var z = 'z'  # test out scoping
  var count = 0  # test out mutation

  # Test cases should be like:
  #   grep: print the matches, or just count them
  #   sed: print a new line based on submatches
  #   awk: re-arrange the cols, and also accumulate counters

  var pat = /<capture d+> s+ <capture w+>/
  line-data | if-match (pat) {
    echo "$z $0 $z"
    # TODO: need pos_args

    #echo "-- $2 $1 --"

    setvar count += 1
  }
  echo "count = $count"
}

# Protocol:
#
# - The file lists its tests the "actions"
# - Then the test harness runs them
# - But should it be ENV vars
#
# - BYO_LIST_TESTS=1
# - BYO_RUN_TEST=foo
# - $PWD is a CLEAN temp dir, the process doesn't have to do anything

#   - silent on success, but prints file on output
#   - OK this makes sense
#
# The trivial test in Python:
#   
# from test import byo
# byo.maybe_main()
#
# bash library:
#  source --builtin byo-server.sh
#
# byo-maybe-main   # reads env variables, and then exits
#
#  source --builtin assertions.ysh
#
# assert-ok 'echo hi'
# assert-stdout 'hi' 'echo -n hi'
#
# "$@"
#
# Run all tests
# util/byo-client.sh run-tests $YSH stdlib/table.ysh
# util/byo-client.sh run-tests -f x $YSH stdlib/table.ysh

# Clean process
# Clean working dir

#
# Stream Protocol:
#     #.byo - is this she-dot, that's for a file
# Do we need metadata?
#

# The harness
#
# It's process based testing.
#
# Test runner process: bash or OSH (unlike sharness!)
# Tested process: any language - bash, 
#
# Key point: you don't have to quote shell code?

list-byo-tests() {
  echo TODO
}

run-byo-tests() {
  # source it
  echo TODO
}

byo-maybe-run
