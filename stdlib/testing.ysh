# TODO:
# - [x] Renaming a bit for "privacy"
# - [x] Renaming for public interface: test-case, test-suite, assert (subject to change)
# - [x] Make test-case and test-suite take a word arg so they don't need parens
# - [x] error if you try to re-enter run-tests
# - [ ] testing testing: assert fail, exn in assert, exn outside of assert
# - [ ] check for both kinds of exceptions (_status and _error)
# - [ ] tests for tests
# - [ ] --tool test support
# - [ ] Turn the assert expression into a string, to print if it fails
# - [ ] Merge _status and _error

##########
# Colors #
##########

const _BOLD = $'\e[1m'
const _RED = $'\e[31m'
const _GREEN = $'\e[32m'
const _YELLOW = $'\e[33m'
const _PURPLE = $'\e[35m'
const _CYAN = $'\e[36m'
const _RESET = $'\e[0;0m'

func _red(text) {
    if (_test_use_color) {
        return ("${_BOLD}${_RED}${text}${_RESET}")
    } else {
        return (text)
    }
}
func _yellow(text) {
    if (_test_use_color) {
        return ("${_YELLOW}${text}${_RESET}")
    } else {
        return (text)
    }
}
func _green(text) {
    if (_test_use_color) {
        return ("${_YELLOW}${text}${_RESET}")
    } else {
        return (text)
    }
}
func _cyan(text) {
    if (_test_use_color) {
        return ("${_YELLOW}${text}${_RESET}")
    } else {
        return (text)
    }
}

############
# Internal #
############

var _testing_in_progress = false
var _test_suite_depth = 0
var _test_suite_stack = []
var _tests = {}

var _num_test_fail = 0
var _num_test_succ = 0
var _test_use_color = true

proc _start_test_suite (; name) {
    call _test_suite_stack->append(name)
}

proc _end_test_suite {
    call _test_suite_stack->pop()
}

proc _test_print_indented (msg) {
    for _ in (0 .. _test_suite_depth) {
        printf "    "
    }
    echo "$msg"
}

proc _run_test_suite (; suite) {
    for name, elem in (suite) {
        if (type (elem) === "Dict") {
            # It's another suite.
            var begin = _cyan("begin")
            _test_print_indented "$begin $name"
            setglobal _test_suite_depth += 1;
            _run_test_suite (elem)
            setglobal _test_suite_depth -= 1;
            var end = _cyan("end")
            _test_print_indented "$end"
        } else {
            # It's a test case.
            _run_test_case (name, elem)
        }
    }
}

proc _run_test_case (; name, block) {
    for _ in (0 .. _test_suite_depth) {
        printf "    "
    }
    var test = _yellow("test")
    printf "$test $name ... "
    try {
        eval (block)
    }
    if (_status === 0) {
        setglobal _num_test_succ += 1
        var ok = _green("ok")
        printf "$ok"
        printf '\n'
    } else {
        setglobal _num_test_fail += 1
    }
}

##########
# Public #
##########

proc test_suite (name ; ; ; block) {
    _start_test_suite (name)
    eval (block)
    _end_test_suite
}

proc test_case (name ; ; ; block) {
    var test_suite = _tests
    for suite_name in (_test_suite_stack) {
        if (not (suite_name in test_suite)) {
            setvar test_suite[suite_name] = {}
        }
        setvar test_suite = test_suite[suite_name]
    }
    setvar test_suite[name] = block
}

proc assert ( ; cond LAZY ) {
    var result = 1
    try {
        setvar result = evalExpr(cond)
    }
    if (_status !== 0) {
        printf '\n'
        var exn = _red("EXCEPTION:")
        _test_print_indented "    $exn $_status"
        error "exception while running assertion"
    } elif (not result) {
        printf '\n'
        var fail = _red("assertion FAILED:")
        _test_print_indented "    $fail TODO"
        error "assertion failed"
    }
}

proc run_tests {
    if (_testing_in_progress) {
        error "Cannot run tests while testing is already in progress"
    }
    setglobal _testing_in_progress = true
    setglobal _num_test_fail = 0
    setglobal _num_test_succ = 0

    _run_test_suite (_tests)
    setglobal _tests = {}
    setglobal _testing_in_progress = false

    var total = _num_test_fail + _num_test_succ
    if (total === 0) {
        var na = _yellow("0 tests ran")
        printf "$na"
        printf '\n'
    } elif (_num_test_fail === 0) {
        var success = _green("$total tests succeeded")
        printf "$success"
        printf '\n'
    } else {
        var failure = _red("$_num_test_fail / $total tests failed")
        printf "$failure"
        printf '\n'
    }
}
