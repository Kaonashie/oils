
module nil8
{

# Very similar to core/value.asdl, which JSON8 is deserialized to.
#
# Right now we're keeping them separate because we want to write a standalone
# Yaks compiler, with no dependency on Oils.
#
# Later I think that Null Bool Int Float Str can either be:
# - defined as shared constants
# - be "inlined" inside any sum type, because of pointer tagging

nvalue =
    Null
  | Bool(bool b)
  | Int(int i)
  | Float(float f)

    # string literal e.g. "foo" or b'\yff'
  | Str(str s)

    # symbol e.g. for 'main' in (func main) or 'x' in (f x)
    # Hm I guess this creates a parsing issue with named args
    # (f x:42) vs (f x y)
    # That would take more lookahead.  It may be acceptable.
    #
    # Another possibility is a reader macro
    # Perhaps it's 
    # (f :x 42) becomes (f [x 42])
    # or
    # you can just use re2c and the `:` can't have a space
    #
    # (f x:42) and (f x: 42) are OK, but (f x : 42)
    # is not
    # So maybe it's J8_FieldName which is IdentifierName + ':'
    # And then symbols are arbitrary
    # But symbols can't contain :

  | Symbol(str s)

  | List(List[nvalue] items)
  | Record(str name, List[nvalue] args, Dict[str, nvalue] named)
}

